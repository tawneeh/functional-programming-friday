Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Input: "aaabccdddda"
Output: "3ab2c4da"

pseudo code:

function compress(string) {
  let arr = string.split(''); // turn string into an array
  let counter = 0;
  for (i = 0; i < arr.length; i++) { // loop through 1 at a time
    if (the element that we are currently on in our loop is the same as the next element +1 to counter) {
    } else {
      return that element // like b in the example input
    }

    // from here, we are incrementing the counter each time a character is repeated. or simply returning that character if there is only one.
    // then, we will take the result of the conditional and join it back into a string, based on the number the counter has incremented to (or just the original character) + the original character

    // so, how to do that? would probably need to convert counter to a string (counter.toString()) then concatenate it all together in the correct order. maybe I would need to do something like 'let newString = string.concat(string1, string2, counterString)'
  }
  return newString;
}

code:

function compress(string) {
  let arr = string.split('');
  for (i = 0; i < arr.length; i++) {
    if (arr[i] == 
  }
  return newString;
}